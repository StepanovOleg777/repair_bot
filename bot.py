import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, CallbackContext
from telegram.ext import Filters
from datetime import datetime
from config import BOT_TOKEN
from database import init_db, save_order, get_new_orders, get_order_by_id, update_order_status, get_orders_stats, \
    get_new_orders_by_category, get_orders_count_by_category, get_master_active_orders, assign_order_to_master, \
    complete_order, get_completed_orders_with_master, get_master_earnings

# –ü—Ä–æ—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
REPAIR_CATEGORIES = {
    "plumbing": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ üöø",
    "electrical": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞ ‚ö°",
    "appliances": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üåÄ",
    "furniture": "–°–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏ üõãÔ∏è",
    "doors_windows": "–î–≤–µ—Ä–∏/–û–∫–Ω–∞ üö™",
    "other": "–ü—Ä–æ—á–µ–µ üîß"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤/–º–∞—Å—Ç–µ—Ä–æ–≤
ADMIN_IDS = [5172832447]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def start_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    user_states[user_id] = 'awaiting_category'

    keyboard = []
    for category_key, category_name in REPAIR_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f"category_{category_key}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n"
        "–£ –≤–∞—Å —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? –ù–µ –±–µ–¥–∞! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –≤ –¢–∞–≥–∞–Ω—Ä–æ–≥–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )


def admin_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /admin —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤.")
        return

    show_admin_panel(update, context)


def show_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤"""
    user_id = update.effective_user.id
    stats = get_orders_stats()

    active_orders = get_master_active_orders(user_id)
    has_active_order = len(active_orders) > 0

    admin_text = (
        "üë®‚Äçüîß *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞*\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ: {stats['new']}\n"
        f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n\n"
    )

    if has_active_order:
        order = active_orders[0]
        admin_text += (
            "üìã *–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞:*\n"
            f"‚Ä¢ *–ó–∞—è–≤–∫–∞ #*: {order[0]}\n"
            f"‚Ä¢ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {order[3]}\n"
            f"‚Ä¢ *–ö–ª–∏–µ–Ω—Ç:* {order[2]}\n"
            f"‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:* {order[4]}\n"
            f"‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {order[5]}\n"
            f"‚Ä¢ *–ü—Ä–∏–Ω—è—Ç–∞:* {order[9]}\n\n"
        )

    admin_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = [
        [InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_show_categories")],
    ]

    if has_active_order:
        order_id = active_orders[0][0]
        keyboard.append([InlineKeyboardButton("üìã –ú–æ—è –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ", callback_data=f"show_my_order_{order_id}")])

    keyboard.extend([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", callback_data="admin_close")]
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        update.callback_query.edit_message_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')


def show_category_selection(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—è–≤–æ–∫"""
    query = update.callback_query
    query.answer()

    category_counts = {}
    for category_key in REPAIR_CATEGORIES.keys():
        count = get_orders_count_by_category(category_key)
        category_counts[category_key] = count

    keyboard = []
    for category_key, category_name in REPAIR_CATEGORIES.items():
        count = category_counts[category_key]
        button_text = f"{category_name} ({count})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"admin_category_{category_key}")])

    total_new = get_orders_stats()['new']
    keyboard.append([InlineKeyboardButton(f"üìã –í—Å–µ –∑–∞—è–≤–∫–∏ ({total_new})", callback_data="admin_all_orders")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:\n(–≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫)",
        reply_markup=reply_markup
    )


def show_single_order(update: Update, context: CallbackContext, category_key=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∑–∞—è–≤–∫—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    query = update.callback_query
    query.answer()

    if category_key == "all":
        orders = get_new_orders()
        category_name = "–í—Å–µ –∑–∞—è–≤–∫–∏"
    else:
        orders = get_new_orders_by_category(category_key)
        category_name = REPAIR_CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if not orders:
        query.edit_message_text(
            f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'\n\n"
            "–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="admin_show_categories")]
            ])
        )
        return

    current_index = context.user_data.get('current_order_index', 0)

    if current_index >= len(orders):
        current_index = 0
    if current_index < 0:
        current_index = len(orders) - 1

    order = orders[current_index]
    order_id = order[0]
    username = order[2]
    order_category = order[3]
    description = order[4]
    contacts = order[5]
    created_at = order[9]

    order_text = (
        f"üéØ *–ó–∞—è–≤–∫–∞ #{order_id}* ({category_name})\n"
        f"*{current_index + 1} –∏–∑ {len(orders)}*\n\n"
        f"‚Ä¢ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {order_category}\n"
        f"‚Ä¢ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {username}\n"
        f"‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        f"‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {contacts}\n"
        f"‚Ä¢ *–°–æ–∑–¥–∞–Ω–∞:* {created_at}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = []
    keyboard.append([InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{order_id}")])

    if len(orders) > 1:
        nav_buttons = []
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{order_id}_{category_key}"))
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{order_id}_{category_key}"))
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_show_categories")])

    context.user_data['current_order_index'] = current_index
    context.user_data['current_orders'] = orders
    context.user_data['current_category'] = category_key

    query.edit_message_text(
        order_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


def handle_admin_actions(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    query.answer()

    data = query.data
    master_id = update.effective_user.id
    master_name = update.effective_user.first_name

    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: {data}")  # Debug

    if data == "admin_show_categories":
        return show_category_selection(update, context)

    elif data == "admin_refresh":
        query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ")
        return

    elif data == "admin_back":
        return show_admin_panel(update, context)

    elif data == "admin_close":
        query.edit_message_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        return

    elif data == "admin_all_orders":
        context.user_data['current_order_index'] = 0
        return show_single_order(update, context, "all")

    elif data.startswith("admin_category_"):
        category_key = data.split("_")[2]
        context.user_data['current_order_index'] = 0
        return show_single_order(update, context, category_key)

    elif data.startswith("take_"):
        active_orders = get_master_active_orders(master_id)
        if active_orders:
            query.answer(
                "‚õî –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞!\n"
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤—É—é.",
                show_alert=True
            )
            return

        order_id = data.split("_")[1]
        assign_order_to_master(order_id, master_id, master_name)
        current_category = context.user_data.get('current_category', 'all')

        query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n\n"
            f"–ú–∞—Å—Ç–µ—Ä: {master_name}\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /complete",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–∞–º", callback_data=f"admin_back_to_{current_category}")]
            ])
        )
        return

    elif data.startswith("admin_back_to_"):
        category_key = data.split("_")[3]
        context.user_data['current_order_index'] = 0
        return show_single_order(update, context, category_key)

    elif data.startswith("show_my_order_"):
        order_id = data.split("_")[3]
        return show_my_active_order(update, context, order_id)

    elif data.startswith("next_"):
        parts = data.split("_")
        if len(parts) >= 3:
            category_key = parts[2]
            current_index = context.user_data.get('current_order_index', 0)
            context.user_data['current_order_index'] = current_index + 1
            return show_single_order(update, context, category_key)

    elif data.startswith("prev_"):
        parts = data.split("_")
        if len(parts) >= 3:
            category_key = parts[2]
            current_index = context.user_data.get('current_order_index', 0)
            context.user_data['current_order_index'] = current_index - 1
            return show_single_order(update, context, category_key)

    elif data.startswith("complete_"):
        order_id = data.split("_")[1]
        complete_order(order_id)
        query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /admin"
        )
        return

    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


def complete_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    active_orders = get_master_active_orders(user_id)

    if not active_orders:
        update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫."
        )
        return

    keyboard = []
    for order in active_orders:
        order_id = order[0]
        category = order[3]
        keyboard.append(
            [InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ #{order_id} - {category}", callback_data=f"complete_{order_id}")])

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def handle_complete_actions(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"""
    query = update.callback_query
    query.answer()

    data = query.data

    if data.startswith("complete_"):
        order_id = data.split("_")[1]
        complete_order(order_id)
        query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /admin"
        )


def handle_category_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    query.answer()

    user_id = update.effective_user.id

    if query.data.startswith("category_"):
        category_key = query.data[9:]

        if category_key in REPAIR_CATEGORIES:
            category_name = REPAIR_CATEGORIES[category_key]
            context.user_data['category'] = category_key
            context.user_data['category_name'] = category_name
            user_states[user_id] = 'awaiting_description'

            query.edit_message_text(
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_name}\n\n"
                     "–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å:"
            )

        else:
            query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start")
            user_states[user_id] = 'main'


def handle_text_messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    current_state = user_states.get(user_id, 'main')
    user_text = update.message.text

    if current_state == 'awaiting_description':
        context.user_data['description'] = user_text
        user_states[user_id] = 'awaiting_contacts'

        update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ! üìù\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "‚Ä¢ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å, –∫—É–¥–∞ –ø—Ä–∏–µ—Ö–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "+7 900 123-45-67\n"
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25"
        )

    elif current_state == 'awaiting_contacts':
        context.user_data['contacts'] = user_text
        category = context.user_data.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        description = context.user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        username = update.effective_user.username or update.effective_user.first_name

        # –°–û–•–†–ê–ù–Ø–ï–ú –ó–ê–Ø–í–ö–£ –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
        order_id = save_order(user_id, username, category, description, user_text)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        # ‚≠ê‚≠ê‚≠ê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ú–ê–°–¢–ï–†–ê–ú ‚≠ê‚≠ê‚≠ê
        try:
            notify_masters_new_order(context, order_id, category, description)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_text = (
            "‚úÖ *–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"*–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #{order_id}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            f"*–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {user_text}\n\n"
            "–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! ‚è∞"
        )

        update.message.reply_text(order_text, parse_mode='Markdown')
        user_states[user_id] = 'main'

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        print(f"\nüéâ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{order_id}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
        print(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_text}")
        print("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–∞—Å—Ç–µ—Ä–∞–º")
        print("=" * 50)

    else:
        update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")


def notify_masters_new_order(context, order_id, category, description):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        short_description = description[:100] + "..." if len(description) > 100 else description

        message = (
            "üéØ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!*\n\n"
            f"*–ó–∞—è–≤–∫–∞ #*: {order_id}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {short_description}\n\n"
            "‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"
        )

        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ #{order_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è (–µ—Å–ª–∏ –æ–Ω —Ç–æ–∂–µ –º–∞—Å—Ç–µ—Ä)
        for master_id in ADMIN_IDS:
            try:
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
                if master_id != context.bot.id:
                    context.bot.send_message(
                        chat_id=master_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä—É {master_id}")
                else:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ ({master_id})")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É {master_id}: {e}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")


def show_my_active_order(update: Update, context: CallbackContext, order_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query
    query.answer()

    order = get_order_by_id(order_id)
    if not order:
        query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    order_data = {
        'id': order[0],
        'user_id': order[1],
        'username': order[2],
        'category': order[3],
        'description': order[4],
        'contacts': order[5],
        'status': order[6],
        'master_id': order[7],
        'master_name': order[8],
        'created_at': order[9]
    }

    # –£–±–∏—Ä–∞–µ–º Markdown —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    order_text = (
        "üìã –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞\n\n"
        f"‚Ä¢ –ó–∞—è–≤–∫–∞ #: {order_data['id']}\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order_data['category']}\n"
        f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: @{order_data['username'] if order_data['username'] else '–±–µ–∑ username'}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {order_data['description']}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order_data['contacts']}\n"
        f"‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∞: {order_data['created_at']}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {order_data['status']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"complete_{order_data['id']}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

    try:
        # –£–±–∏—Ä–∞–µ–º parse_mode='Markdown'
        query.edit_message_text(
            order_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –≤–æ–æ–±—â–µ
        simple_text = f"–ó–∞—è–≤–∫–∞ #{order_data['id']} - {order_data['category']}\n–ö–ª–∏–µ–Ω—Ç: {order_data['contacts']}"
        query.edit_message_text(
            simple_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def finance_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    completed_orders = get_completed_orders_with_master()
    total_orders = len(completed_orders)
    your_earnings = total_orders * 500  # 500 —Ä—É–±. —Å –∑–∞–∫–∞–∑–∞

    finance_text = (
        "üí∞ *–§–ò–ù–ê–ù–°–û–í–ê–Ø –û–¢–ß–ï–¢–ù–û–°–¢–¨*\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚Ä¢ –í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (10%): {your_earnings} —Ä—É–±.\n\n"
    )

    if total_orders > 0:
        finance_text += "üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n\n"

        for order in completed_orders[:5]:
            order_id, master_id, master_name, category, created_at = order
            finance_text += f"‚Ä¢ –ó–∞—è–≤–∫–∞ #{order_id} - {category}\n"
            finance_text += f"  –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
            finance_text += f"  –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {created_at}\n\n"

        masters_stats = {}
        for order in completed_orders:
            master_id = order[1]
            masters_stats[master_id] = masters_stats.get(master_id, 0) + 1

        finance_text += "üë®‚Äçüîß *–ü–æ –º–∞—Å—Ç–µ—Ä–∞–º:*\n"
        for master_id, orders_count in masters_stats.items():
            finance_text += f"‚Ä¢ –ú–∞—Å—Ç–µ—Ä {master_id}: {orders_count} –∑–∞–∫.\n"
    else:
        finance_text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"

    update.message.reply_text(finance_text, parse_mode='Markdown')


def status_command(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return

    stats = get_orders_stats()
    status_text = (
        "ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n"
        f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"‚Ä¢ –ó–∞—è–≤–æ–∫ –≤—Å–µ–≥–æ: {stats['total']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['new']}\n"
        f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
        f"‚Ä¢ –ú–∞—Å—Ç–µ—Ä–æ–≤: {len(ADMIN_IDS) - 1}\n"
        "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    )
    update.message.reply_text(status_text, parse_mode='Markdown')


def main():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

    updater = Updater(BOT_TOKEN, use_context=True)
    application = updater.dispatcher

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("complete", complete_command))
    application.add_handler(CommandHandler("finance", finance_command))
    application.add_handler(CommandHandler("status", status_command))

    application.add_handler(CallbackQueryHandler(handle_category_selection, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(handle_complete_actions, pattern="^complete_"))
    application.add_handler(CallbackQueryHandler(handle_admin_actions))

    application.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text_messages))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("‚Ä¢ /start - –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("‚Ä¢ /admin - –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫)")
    print("‚Ä¢ /complete - –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫)")
    print("‚Ä¢ /finance - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å")
    print("‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")

    updater.start_polling(
        allowed_updates=['message', 'callback_query'],
        drop_pending_updates=True
    )
    updater.idle()


if __name__ == "__main__":
    main()