import sqlite3
from datetime import datetime


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()

    cur.execute('''CREATE TABLE IF NOT EXISTS orders (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 user_id INTEGER,
                 username TEXT,
                 category TEXT,
                 description TEXT,
                 contacts TEXT,
                 status TEXT DEFAULT 'new',
                 master_id INTEGER DEFAULT NULL,
                 master_name TEXT DEFAULT NULL,
                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                 completed_at TIMESTAMP DEFAULT NULL)''')  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û completed_at

    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def save_order(user_id, username, category, description, contacts):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º ID"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()

    cur.execute("""INSERT INTO orders 
                 (user_id, username, category, description, contacts) 
                 VALUES (?, ?, ?, ?, ?)""",
                (user_id, username, category, description, contacts))

    order_id = cur.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    conn.commit()
    conn.close()
    print(f"–ó–∞—è–≤–∫–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    return order_id  # ‚Üê –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID


def get_new_orders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE status = 'new' ORDER BY created_at ASC")  # ASC –≤–º–µ—Å—Ç–æ DESC
    orders = cur.fetchall()
    conn.close()
    return orders


def get_new_orders_by_category(category_key=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å human-readable –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    category_mapping = {
        "plumbing": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ üöø",
        "electrical": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞ ‚ö°",
        "appliances": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üåÄ",
        "furniture": "–°–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏ üõãÔ∏è",
        "doors_windows": "–î–≤–µ—Ä–∏/–û–∫–Ω–∞ üö™",
        "other": "–ü—Ä–æ—á–µ–µ üîß"
    }

    if category_key and category_key != "all":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ human-readable –Ω–∞–∑–≤–∞–Ω–∏–µ
        category_name = category_mapping.get(category_key, category_key)
        cur.execute("SELECT * FROM orders WHERE status = 'new' AND category = ? ORDER BY created_at ASC",
                    (category_name,))  # ASC –≤–º–µ—Å—Ç–æ DESC
    else:
        # –î–ª—è "all" –∏–ª–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤—Å–µ –∑–∞—è–≤–∫–∏
        cur.execute("SELECT * FROM orders WHERE status = 'new' ORDER BY created_at ASC")  # ASC –≤–º–µ—Å—Ç–æ DESC

    orders = cur.fetchall()
    conn.close()
    return orders


def get_order_by_id(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
    order = cur.fetchone()
    conn.close()
    return order


def update_order_status(order_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))
    conn.commit()
    conn.close()
    print(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")


def get_orders_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞—è–≤–∫–∞–º"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()

    cur.execute("SELECT COUNT(*) FROM orders")
    total = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM orders WHERE status = 'new'")
    new = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM orders WHERE status = 'in_progress'")
    in_progress = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM orders WHERE status = 'completed'")
    completed = cur.fetchone()[0]

    conn.close()

    return {
        'total': total,
        'new': new,
        'in_progress': in_progress,
        'completed': completed
    }


def get_orders_count_by_category(category_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Å human-readable –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    category_mapping = {
        "plumbing": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ üöø",
        "electrical": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞ ‚ö°",
        "appliances": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üåÄ",
        "furniture": "–°–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏ üõãÔ∏è",
        "doors_windows": "–î–≤–µ—Ä–∏/–û–∫–Ω–∞ üö™",
        "other": "–ü—Ä–æ—á–µ–µ üîß"
    }

    category_name = category_mapping.get(category_key, category_key)

    cur.execute("SELECT COUNT(*) FROM orders WHERE status = 'new' AND category = ?", (category_name,))
    count = cur.fetchone()[0]
    conn.close()
    return count


def assign_order_to_master(order_id, master_id, master_name):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç–∞ –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
    cur.execute("SELECT status, master_id FROM orders WHERE id = ?", (order_id,))
    order = cur.fetchone()

    if order and order[0] != 'new':
        conn.close()
        return False  # –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ - –Ω–∞–∑–Ω–∞—á–∞–µ–º
    cur.execute("UPDATE orders SET status = 'in_progress', master_id = ?, master_name = ? WHERE id = ?",
                (master_id, master_name, order_id))
    conn.commit()
    conn.close()
    return True  # –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ


def get_master_active_orders(master_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE master_id = ? AND status = 'in_progress'", (master_id,))
    orders = cur.fetchall()
    conn.close()
    return orders


def complete_order(order_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –∑–∞–ø–∏—Å—å—é –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("UPDATE orders SET status = 'completed', completed_at = CURRENT_TIMESTAMP WHERE id = ?", (order_id,))
    conn.commit()
    conn.close()
    print(f"–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def get_completed_orders_with_master():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Å—Ç–µ—Ä–µ"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT id, master_id, master_name, category, created_at, completed_at 
        FROM orders 
        WHERE status = 'completed' 
        ORDER BY completed_at DESC
    """)
    orders = cur.fetchall()
    conn.close()
    return orders


def get_master_earnings(master_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    conn = sqlite3.connect('orders.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT COUNT(*) as completed_orders 
        FROM orders 
        WHERE master_id = ? AND status = 'completed'
    """, (master_id,))
    stats = cur.fetchone()
    conn.close()
    return stats[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤